add:
# SP--
  @SP
  M=M-1
# D = *SP
  A=M
  D=M
# SP--
  @SP
  M=M-1
# *SP = *SP + D
  A=M
  M=D+M
# SP++
  @SP
  M=M+1

sub:
# SP--
  @SP
  M=M-1
# D = *SP
  A=M
  D=M
# SP--
  @SP
  M=M-1
# *SP = *SP - D
  A=M
  M=M-D
# SP++
  @SP
  M=M+1

and:
# SP--
  @SP
  M=M-1
# D = *SP
  A=M
  D=M
# SP--
  @SP
  M=M-1
# *SP = *SP & D
  A=M
  M=D&M
# SP++
  @SP
  M=M+1

or:
# SP--
  @SP
  M=M-1
# D = *SP
  A=M
  D=M
# SP--
  @SP
  M=M-1
# *SP = *SP | D
  A=M
  M=D|M
# SP++
  @SP
  M=M+1

neg:
# SP--
  @SP
  M=M-1
# *SP = -*SP
  A=M
  M=-M
# SP++
  @SP
  M=M+1

not:
# SP--
  @SP
  M=M-1
# *SP = !*SP
  A=M
  M=!M
# SP++
  @SP
  M=M+1

eq:
# SP--
  @SP
  M=M-1
# D = *SP
  A=M
  D=M
# SP--
  @SP
  M=M-1
# D = *SP - D
  A=M
  D=M-D
# if D == 0 goto JUMP
  @JUMP
  D;JEQ
# *SP = FALSE
  @SP
  A=M
  M=0
# goto EXIT
  @EXIT
  0;JMP
# (JUMP)
  (JUMP)
# *SP = TRUE
  @SP
  A=M
  M=-1
# (EXIT)
  (EXIT)
# SP++
  @SP
  M=M+1

gt:
# SP--
  @SP
  M=M-1
# D = *SP
  A=M
  D=M
# SP--
  @SP
  M=M-1
# D = *SP - D
  A=M
  D=M-D
# if D > 0 goto JUMP
  @JUMP
  D;JGT
# *SP = FALSE
  @SP
  A=M
  M=0
# goto EXIT
  @EXIT
  0;JMP
# (JUMP)
  (JUMP)
# *SP = TRUE
  @SP
  A=M
  M=-1
# (EXIT)
  (EXIT)
# SP++
  @SP
  M=M+1

lt:
# SP--
  @SP
  M=M-1
# D = *SP
  A=M
  D=M
# SP--
  @SP
  M=M-1
# D = *SP - D
  A=M
  D=M-D
# if D < 0 goto JUMP
  @JUMP
  D;JLT
# *SP = FALSE
  @SP
  A=M
  M=0
# goto EXIT
  @EXIT
  0;JMP
# (JUMP)
  (JUMP)
# *SP = TRUE
  @SP
  A=M
  M=-1
# (EXIT)
  (EXIT)
# SP++
  @SP
  M=M+1

push constant x:
# *SP = x
  @x
  D=A
  @SP
  A=M
  M=D
# SP++
  @SP
  M=M+1

push local/arg/this/that i:
  @i
  D=A
  @LCL # change
  A=D+M
  D=M
# *SP = D
  @SP
  A=M
  M=D
# SP++
  @SP
  M=M+1

pop local/arg/this/that i:
# D = LCL[i]
  @i
  D=A
  @LCL # change
  D=D+M
# D = LCL[i] + *SP--
  @SP
  A=M-1
  D=D+M
# *LCL[i] = *SP--
  A=D-M
  M=D-A
# SP--
  @SP
  M=M-1

push pointer/temp i:
# D = TMP[i]
  @(3|5)+i
  D=M
# *SP = D
  @SP
  A=M
  M=D
# SP++
  @SP
  M=M+1

pop pointer/temp i:
# SP--
  @SP
  M=M-1
# D = *SP
  A=M
  D=M
# TMP[i] = D
  @(3|5)+i
  M=D

push static i:
# D = static.i
  @static.i
  D=M
# *SP = D
  @SP
  A=M
  M=D
# SP++
  @SP
  M=M+1

pop static i:
# SP--
  @SP
  M=M-1
# D = *SP
  A=M
  D=M
# static.i = D
  @static.i
  M=D
